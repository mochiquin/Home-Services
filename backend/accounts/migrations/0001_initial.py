# Generated by Django 5.2.5 on 2025-09-26 06:50

import django.contrib.auth.models
import django.contrib.auth.validators
import django.db.models.deletion
import django.utils.timezone
import uuid
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('auth', '0012_alter_user_first_name_max_length'),
    ]

    operations = [
        migrations.CreateModel(
            name='User',
            fields=[
                ('password', models.CharField(max_length=128, verbose_name='password')),
                ('last_login', models.DateTimeField(blank=True, null=True, verbose_name='last login')),
                ('is_superuser', models.BooleanField(default=False, help_text='Designates that this user has all permissions without explicitly assigning them.', verbose_name='superuser status')),
                ('username', models.CharField(error_messages={'unique': 'A user with that username already exists.'}, help_text='Required. 150 characters or fewer. Letters, digits and @/./+/-/_ only.', max_length=150, unique=True, validators=[django.contrib.auth.validators.UnicodeUsernameValidator()], verbose_name='username')),
                ('first_name', models.CharField(blank=True, max_length=150, verbose_name='first name')),
                ('last_name', models.CharField(blank=True, max_length=150, verbose_name='last name')),
                ('email', models.EmailField(blank=True, max_length=254, verbose_name='email address')),
                ('is_staff', models.BooleanField(default=False, help_text='Designates whether the user can log into this admin site.', verbose_name='staff status')),
                ('is_active', models.BooleanField(default=True, help_text='Designates whether this user should be treated as active. Unselect this instead of deleting accounts.', verbose_name='active')),
                ('date_joined', models.DateTimeField(default=django.utils.timezone.now, verbose_name='date joined')),
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('password_min_length', models.IntegerField(default=8, help_text='Minimum password length')),
                ('require_uppercase', models.BooleanField(default=True, help_text='Require uppercase letter')),
                ('require_lowercase', models.BooleanField(default=True, help_text='Require lowercase letter')),
                ('require_numbers', models.BooleanField(default=True, help_text='Require numbers')),
                ('groups', models.ManyToManyField(blank=True, help_text='The groups this user belongs to. A user will get all permissions granted to each of their groups.', related_name='user_set', related_query_name='user', to='auth.group', verbose_name='groups')),
                ('user_permissions', models.ManyToManyField(blank=True, help_text='Specific permissions for this user.', related_name='user_set', related_query_name='user', to='auth.permission', verbose_name='user permissions')),
            ],
            options={
                'db_table': 'auth_user',
            },
            managers=[
                ('objects', django.contrib.auth.models.UserManager()),
            ],
        ),
        migrations.CreateModel(
            name='UserProfile',
            fields=[
                ('id', models.UUIDField(default=uuid.uuid4, editable=False, primary_key=True, serialize=False)),
                ('contact_email', models.EmailField(blank=True, help_text='Preferred contact email (defaults to account email)', max_length=254, verbose_name='Contact Email')),
                ('display_name', models.CharField(blank=True, help_text='Public display name (defaults to username)', max_length=150, verbose_name='Display Name')),
                ('avatar', models.ImageField(blank=True, help_text="User's profile picture", null=True, upload_to='avatars/', verbose_name='Avatar')),
                ('created_at', models.DateTimeField(auto_now_add=True, verbose_name='Created At')),
                ('updated_at', models.DateTimeField(auto_now=True, verbose_name='Updated At')),
                ('last_activity', models.DateTimeField(blank=True, help_text='Last user activity timestamp', null=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='profile', to=settings.AUTH_USER_MODEL, verbose_name='User')),
            ],
            options={
                'verbose_name': 'User Profile',
                'verbose_name_plural': 'User Profiles',
                'ordering': ['-created_at'],
            },
        ),
        migrations.CreateModel(
            name='GitCredential',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('credential_type', models.CharField(choices=[('https_token', 'HTTPS Personal Access Token'), ('ssh_key', 'SSH Private Key'), ('basic_auth', 'Username/Password')], default='https_token', max_length=20)),
                ('provider', models.CharField(default='github', help_text='Git provider (github, gitlab, bitbucket, etc.)', max_length=50)),
                ('encrypted_data', models.TextField(help_text='Encrypted credential data (token, username/password, ssh key)')),
                ('username', models.CharField(blank=True, help_text='Username for basic auth or git user', max_length=255)),
                ('is_active', models.BooleanField(default=True)),
                ('description', models.CharField(blank=True, help_text='User-defined description for this credential', max_length=200)),
                ('expires_at', models.DateTimeField(blank=True, help_text='Credential expiration time', null=True)),
                ('last_used_at', models.DateTimeField(blank=True, help_text='Last time this credential was used', null=True)),
                ('scopes', models.JSONField(blank=True, default=list, help_text='Token permission scopes')),
                ('use_count', models.IntegerField(default=0, help_text='Number of times this credential has been used')),
                ('last_error', models.TextField(blank=True, help_text='Last error message when using this credential')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user_profile', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='git_credentials', to='accounts.userprofile')),
            ],
            options={
                'verbose_name': 'Git Credential',
                'verbose_name_plural': 'Git Credentials',
                'unique_together': {('user_profile', 'provider', 'credential_type')},
            },
        ),
    ]
