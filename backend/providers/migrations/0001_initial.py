# Generated by Django 5.2.5 on 2025-09-26 06:50

import django.db.models.deletion
from django.conf import settings
from django.db import migrations, models


class Migration(migrations.Migration):

    initial = True

    dependencies = [
        ('services', '0001_initial'),
        migrations.swappable_dependency(settings.AUTH_USER_MODEL),
    ]

    operations = [
        migrations.CreateModel(
            name='ServiceProvider',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('business_name', models.CharField(blank=True, max_length=200, null=True)),
                ('phone_number', models.CharField(max_length=20)),
                ('address', models.TextField()),
                ('city', models.CharField(max_length=100)),
                ('state', models.CharField(max_length=100)),
                ('postal_code', models.CharField(max_length=20)),
                ('latitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('longitude', models.DecimalField(blank=True, decimal_places=6, max_digits=9, null=True)),
                ('license_number', models.CharField(blank=True, max_length=100, null=True)),
                ('insurance_verified', models.BooleanField(default=False)),
                ('background_check_verified', models.BooleanField(default=False)),
                ('average_rating', models.DecimalField(decimal_places=2, default=0.0, max_digits=3)),
                ('total_reviews', models.IntegerField(default=0)),
                ('is_active', models.BooleanField(default=True)),
                ('is_verified', models.BooleanField(default=False)),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('user', models.OneToOneField(on_delete=django.db.models.deletion.CASCADE, related_name='provider_profile', to=settings.AUTH_USER_MODEL)),
            ],
        ),
        migrations.CreateModel(
            name='ProviderService',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('base_price', models.DecimalField(decimal_places=2, max_digits=10)),
                ('hourly_rate', models.DecimalField(blank=True, decimal_places=2, max_digits=10, null=True)),
                ('years_of_experience', models.IntegerField(default=0)),
                ('description', models.TextField(blank=True)),
                ('certifications', models.TextField(blank=True, help_text='List of relevant certifications')),
                ('is_available', models.BooleanField(default=True)),
                ('max_distance_km', models.IntegerField(default=50, help_text='Maximum service distance in kilometers')),
                ('created_at', models.DateTimeField(auto_now_add=True)),
                ('updated_at', models.DateTimeField(auto_now=True)),
                ('service', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, to='services.service')),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='offered_services', to='providers.serviceprovider')),
            ],
        ),
        migrations.CreateModel(
            name='ProviderDocument',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('document_type', models.CharField(choices=[('license', 'Business License'), ('insurance', 'Insurance Certificate'), ('certification', 'Professional Certification'), ('id', 'Identification Document'), ('background_check', 'Background Check')], max_length=20)),
                ('file', models.FileField(upload_to='provider_documents/%Y/%m/')),
                ('is_verified', models.BooleanField(default=False)),
                ('uploaded_at', models.DateTimeField(auto_now_add=True)),
                ('verified_at', models.DateTimeField(blank=True, null=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='documents', to='providers.serviceprovider')),
            ],
        ),
        migrations.CreateModel(
            name='ProviderAvailability',
            fields=[
                ('id', models.BigAutoField(auto_created=True, primary_key=True, serialize=False, verbose_name='ID')),
                ('day_of_week', models.IntegerField(choices=[(0, 'Monday'), (1, 'Tuesday'), (2, 'Wednesday'), (3, 'Thursday'), (4, 'Friday'), (5, 'Saturday'), (6, 'Sunday')])),
                ('start_time', models.TimeField()),
                ('end_time', models.TimeField()),
                ('is_available', models.BooleanField(default=True)),
                ('provider', models.ForeignKey(on_delete=django.db.models.deletion.CASCADE, related_name='availability', to='providers.serviceprovider')),
            ],
        ),
        migrations.AddIndex(
            model_name='serviceprovider',
            index=models.Index(fields=['city'], name='idx_provider_city'),
        ),
        migrations.AddIndex(
            model_name='serviceprovider',
            index=models.Index(fields=['is_active', 'is_verified'], name='idx_provider_status'),
        ),
        migrations.AddIndex(
            model_name='serviceprovider',
            index=models.Index(fields=['average_rating'], name='idx_provider_rating'),
        ),
        migrations.AddIndex(
            model_name='providerservice',
            index=models.Index(fields=['service', 'is_available'], name='idx_provider_service_available'),
        ),
        migrations.AddIndex(
            model_name='providerservice',
            index=models.Index(fields=['provider', 'base_price'], name='idx_provider_service_price'),
        ),
        migrations.AddConstraint(
            model_name='providerservice',
            constraint=models.UniqueConstraint(fields=('provider', 'service'), name='uq_provider_service'),
        ),
        migrations.AddIndex(
            model_name='providerdocument',
            index=models.Index(fields=['provider', 'document_type'], name='idx_provider_document_type'),
        ),
        migrations.AddIndex(
            model_name='provideravailability',
            index=models.Index(fields=['provider', 'day_of_week'], name='idx_provider_availability'),
        ),
        migrations.AddConstraint(
            model_name='provideravailability',
            constraint=models.UniqueConstraint(fields=('provider', 'day_of_week'), name='uq_provider_availability'),
        ),
    ]
